{
  "Comment": "A Hello World example demonstrating various state types of the Amazon States Language",
  "StartAt": "Pass",
  "States": {
    "Pass": {
      "Comment": "A Pass state passes its input to its output, without performing work. Pass states are useful when constructing and debugging state machines.",
      "Type": "Pass",
      "Next": "Split Video"
    },
    "Split Video": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:aws:lambda:us-east-1:537801392411:function:interqu-SplitVideoFunction-WWsqZs0SM7kv:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Pass (1)"
    },
    "Pass (1)": {
      "Comment": "A Pass state passes its input to its output, without performing work. Pass states are useful when constructing and debugging state machines.",
      "Type": "Pass",
      "Next": "Parallel (1)"
    },
    "Parallel (1)": {
      "Type": "Parallel",
      "Next": "Pass (3)",
      "Branches": [
        {
          "StartAt": "Parallel",
          "States": {
            "Parallel": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "Get Sentiment",
                  "States": {
                    "Get Sentiment": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "OutputPath": "$.Payload",
                      "Parameters": {
                        "Payload.$": "$",
                        "FunctionName": "${GetSentimentFunctionArn}"
                      },
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException",
                            "Lambda.TooManyRequestsException"
                          ],
                          "IntervalSeconds": 2,
                          "MaxAttempts": 6,
                          "BackoffRate": 2
                        }
                      ],
                      "Next": "Choice"
                    },
                    "Choice": {
                      "Type": "Choice",
                      "Choices": [
                        {
                          "Not": {
                            "Variable": "$.statusCode",
                            "NumericEquals": 200
                          },
                          "Next": "OnSentimentFail"
                        },
                        {
                          "Variable": "$.statusCode",
                          "NumericEquals": 200,
                          "Next": "SentimentOutput"
                        }
                      ]
                    },
                    "SentimentOutput": {
                      "Type": "Pass",
                      "End": true
                    },
                    "OnSentimentFail": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::sns:publish",
                      "Parameters": {
                        "Message.$": "$",
                        "TopicArn": "failure topic"
                      },
                      "Next": "Fail (1)"
                    },
                    "Fail (1)": {
                      "Type": "Fail"
                    }
                  }
                },
                {
                  "StartAt": "Get Expressions",
                  "States": {
                    "Get Expressions": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "OutputPath": "$.Payload",
                      "Parameters": {
                        "Payload.$": "$",
                        "FunctionName": "${GetExpressionFunctionArn}"
                      },
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException",
                            "Lambda.TooManyRequestsException"
                          ],
                          "IntervalSeconds": 2,
                          "MaxAttempts": 6,
                          "BackoffRate": 2
                        }
                      ],
                      "Next": "Choice (1)"
                    },
                    "Choice (1)": {
                      "Type": "Choice",
                      "Choices": [
                        {
                          "Variable": "$.statusCode",
                          "NumericEquals": 200,
                          "Next": "ExpressionOutput"
                        },
                        {
                          "Not": {
                            "Variable": "$.statusCode",
                            "NumericEquals": 200
                          },
                          "Next": "OnExpressionFail"
                        }
                      ]
                    },
                    "ExpressionOutput": {
                      "Type": "Pass",
                      "End": true
                    },
                    "OnExpressionFail": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::sns:publish",
                      "Parameters": {
                        "Message.$": "$",
                        "TopicArn": "Failure topic"
                      },
                      "Next": "Fail"
                    },
                    "Fail": {
                      "Type": "Fail"
                    }
                  }
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "DataPipe",
          "States": {
            "DataPipe": {
              "Type": "Pass",
              "End": true
            }
          }
        }
      ]
    },
    "Pass (3)": {
      "Comment": "A Pass state passes its input to its output, without performing work. Pass states are useful when constructing and debugging state machines.",
      "Type": "Pass",
      "Next": "GPT Analysis"
    },
    "GPT Analysis": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:aws:lambda:us-east-1:537801392411:function:interqu-GPTAnalysisFunction-8sCc6d3psHOI:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Choice (3)"
    },
    "Choice (3)": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.lambdaOutput.result",
            "StringEquals": "success"
          },
          "Next": "OnGPTFail"
        }
      ],
      "Default": "Publish Data to Mongo"
    },
    "OnGPTFail": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message.$": "$",
        "TopicArn": "failuire topic"
      },
      "Next": "Fail (3)"
    },
    "Fail (3)": {
      "Type": "Fail"
    },
    "Publish Data to Mongo": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:aws:lambda:us-east-1:537801392411:function:interqu-PublishMongoFunction-SjK6oC9Ku0wg:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Wait"
    },
    "Wait": {
      "Type": "Wait",
      "Seconds": 2,
      "Next": "Publish Finished"
    },
    "Publish Finished": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message.$": "$",
        "TopicArn": "finished_topic"
      },
      "Next": "Pass (2)"
    },
    "Pass (2)": {
      "Type": "Pass",
      "Next": "Success"
    },
    "Success": {
      "Type": "Succeed"
    }
  }
}