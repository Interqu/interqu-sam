{
  "Comment": "A Hello World example demonstrating various state types of the Amazon States Language",
  "StartAt": "Pass",
  "States": {
    "Pass": {
      "Comment": "A Pass state passes its input to its output, without performing work. Pass states are useful when constructing and debugging state machines.",
      "Type": "Pass",
      "Next": "Parallel (2)"
    },
    "Parallel (2)": {
      "Type": "Parallel",
      "Next": "Pass (1)",
      "Branches": [
        {
          "StartAt": "Split Video",
          "States": {
            "Split Video": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${SplitVideoFunctionArn}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "InfoPipe (0)",
          "States": {
            "InfoPipe (0)": {
              "Type": "Pass",
              "End": true
            }
          }
        }
      ]
    },
    "Pass (1)": {
      "Comment": "A Pass state passes its input to its output, without performing work. Pass states are useful when constructing and debugging state machines.",
      "Type": "Pass",
      "Next": "Parallel"
    },
    "Parallel": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Get Question Info",
          "States": {
            "Get Question Info": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${GetQuestionInfoFunctionArn}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Choice (2)"
            },
            "Choice (2)": {
              "Type": "Choice",
              "Choices": [
                {
                  "Not": {
                    "Variable": "$.statusCode",
                    "NumericEquals": 200
                  },
                  "Next": "OnInfoFetchFail"
                },
                {
                  "Variable": "$.statusCode",
                  "NumericEquals": 200,
                  "Next": "QuestionInfoOutput"
                }
              ]
            },
            "QuestionInfoOutput": {
              "Type": "Pass",
              "End": true
            },
            "OnInfoFetchFail": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sns:publish",
              "Parameters": {
                "Message.$": "$",
                "TopicArn": "failure topic"
              },
              "Next": "Fail (2)"
            },
            "Fail (2)": {
              "Type": "Fail"
            }
          }
        },
        {
          "StartAt": "Get Sentiment",
          "States": {
            "Get Sentiment": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${GetSentimentFunctionArn}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "Choice"
            },
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Not": {
                    "Variable": "$.statusCode",
                    "NumericEquals": 200
                  },
                  "Next": "OnSentimentFail"
                },
                {
                  "Variable": "$.statusCode",
                  "NumericEquals": 200,
                  "Next": "SentimentOutput"
                }
              ]
            },
            "SentimentOutput": {
              "Type": "Pass",
              "End": true
            },
            "OnSentimentFail": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sns:publish",
              "Parameters": {
                "Message.$": "$",
                "TopicArn": "failure topic"
              },
              "Next": "Fail (1)"
            },
            "Fail (1)": {
              "Type": "Fail"
            }
          }
        },
        {
          "StartAt": "Get Expressions",
          "States": {
            "Get Expressions": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${GetExpressionFunctionArn}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "Choice (1)"
            },
            "Choice (1)": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.statusCode",
                  "NumericEquals": 200,
                  "Next": "ExpressionOutput"
                },
                {
                  "Not": {
                    "Variable": "$.statusCode",
                    "NumericEquals": 200
                  },
                  "Next": "OnExpressionFail"
                }
              ]
            },
            "ExpressionOutput": {
              "Type": "Pass",
              "End": true
            },
            "OnExpressionFail": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sns:publish",
              "Parameters": {
                "Message.$": "$",
                "TopicArn": "Failure topic"
              },
              "Next": "Fail (4)"
            },
            "Fail (4)": {
              "Type": "Fail"
            }
          }
        },
        {
          "StartAt": "Get Transcript",
          "States": {
            "Get Transcript": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${AudioTranscriptionFunctionArn}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Choice (4)"
            },
            "Choice (4)": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.statusCode",
                  "NumericEquals": 200,
                  "Next": "TranscriptOutput"
                },
                {
                  "Not": {
                    "Variable": "$.statusCode",
                    "NumericEquals": 200
                  },
                  "Next": "OnTranscriptFail"
                }
              ]
            },
            "TranscriptOutput": {
              "Type": "Pass",
              "End": true
            },
            "OnTranscriptFail": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sns:publish",
              "Parameters": {
                "Message.$": "$",
                "TopicArn": "Failure topic"
              },
              "Next": "Fail"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        }
      ],
      "Next": "Pass (3)"
    },
    "Pass (3)": {
      "Comment": "A Pass state passes its input to its output, without performing work. Pass states are useful when constructing and debugging state machines.",
      "Type": "Pass",
      "Next": "Parallel (1)"
    },
    "Parallel (1)": {
      "Type": "Parallel",
      "Next": "Pass (4)",
      "Branches": [
        {
          "StartAt": "GPT Analysis",
          "States": {
            "GPT Analysis": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${GPTAnalysisFunctionArn}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "Choice (3)"
            },
            "Choice (3)": {
              "Type": "Choice",
              "Choices": [
                {
                  "Not": {
                    "Variable": "$.statusCode",
                    "NumericEquals": 200
                  },
                  "Next": "OnGPTFail"
                },
                {
                  "Variable": "$.statusCode",
                  "NumericEquals": 200,
                  "Next": "GPTAnalysisOutput"
                }
              ]
            },
            "OnGPTFail": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sns:publish",
              "Parameters": {
                "Message.$": "$",
                "TopicArn": "failure topic"
              },
              "Next": "Fail (3)"
            },
            "Fail (3)": {
              "Type": "Fail"
            },
            "GPTAnalysisOutput": {
              "Type": "Pass",
              "End": true
            }
          }
        },
        {
          "StartAt": "InfoPipe",
          "States": {
            "InfoPipe": {
              "Type": "Pass",
              "End": true
            }
          }
        }
      ]
    },
    "Pass (4)": {
      "Comment": "A Pass state passes its input to its output, without performing work. Pass states are useful when constructing and debugging state machines.",
      "Type": "Pass",
      "Next": "Publish Data to Mongo"
    },
    "Publish Data to Mongo": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${PublishMongoFunctionArn}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Choice (5)"
    },
    "Choice (5)": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.statusCode",
            "NumericEquals": 200
          },
          "Next": "OnPublishFail"
        },
        {
          "Variable": "$.statusCode",
          "NumericEquals": 200,
          "Next": "Success"
        }
      ]
    },
    "OnPublishFail": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message.$": "$",
        "TopicArn": "failure topic"
      },
      "Next": "Fail (5)"
    },
    "Fail (5)": {
      "Type": "Fail"
    },
    "Success": {
      "Type": "Succeed"
    }
  }
}